// Do Not Edit This File!!! Removing or changing anything in this file will break preprocessing.
// If you want to improve/add new mixins create a new pull request and we can merge it in

////////////////////////////////////////////////////////////////////
// Typography
////////////////////////////////////////////////////////////////////

@mixin type($args: ()) {
  $opts: map-merge(
    (
      size: null,
      height: null,
      spacing: null,
      family: null,
      color: null,
      weight: 400,
      align: null,
      transform: null,
      style: normal,
      decoration: none,
    ),
    $args
  );

  @if map-get($opts, size) {
    font-size: map-get($opts, size);
  }

  @if map-get($opts, spacing) {
    letter-spacing: map-get($opts, spacing);
  }

  @if map-get($opts, height) {
    line-height: map-get($opts, height);
  }

  @if map-get($opts, family) {
    font-family: map-get($opts, family);
  }

  @if map-get($opts, color) {
    color: map-get($opts, color);
  }

  @if map-get($opts, weight) {
    font-weight: map-get($opts, weight);
  }

  @if map-get($opts, align) {
    text-align: map-get($opts, align);
  }

  @if map-get($opts, transform) {
    text-transform: map-get($opts, transform);
  }

  @if map-get($opts, style) {
    font-style: map-get($opts, style);
  }

  @if map-get($opts, decoration) {
    text-decoration: map-get($opts, decoration);
  }

  @content;
}

// lite version for quickness when styling inside media queries

@mixin quick_type($font-size, $line-height, $letter-spacing) {
  font-size: $font-size;
  line-height: $line-height;
  letter-spacing: $letter-spacing;
}

////////////////////////////////////////////////////////////////////
// Media Queries
////////////////////////////////////////////////////////////////////

// see media query variables in _variables.scss

@mixin mq($size) {
  @each $item, $value in $media-queries {
    @if $item == $size {
      @if map-get($value, breakpoint) != null {
        @media screen and #{map-get($value, breakpoint)} {
          @content;
        }
      }
    }
  }
}

////////////////////////////////////////////////////////////////////
// Width/Height Dimensions
////////////////////////////////////////////////////////////////////

@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

////////////////////////////////////////////////////////////////////
// Margin Left Right Auto
////////////////////////////////////////////////////////////////////

@mixin margin_lr($auto: auto) {
  margin-left: $auto;
  margin-right: $auto;
}

////////////////////////////////////////////////////////////////////
// Positioning with offsets
////////////////////////////////////////////////////////////////////

@mixin abs(
  $top: auto,
  $right: auto,
  $bottom: auto,
  $left: auto,
  $zindex: null
) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $zindex;
}

@mixin fixed($top, $right, $bottom, $left, $zindex: null) {
  position: fixed;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  z-index: $zindex;
}

////////////////////////////////////////////////////////////////////
// Responsive Images
////////////////////////////////////////////////////////////////////

@mixin image($max-width: 100%, $height: auto, $display: block) {
  max-width: $max-width;
  height: $height;
  display: $display;
}

////////////////////////////////////////////////////////////////////
// Triangles
////////////////////////////////////////////////////////////////////

@mixin tri($direction, $size1, $size2, $color) {
  width: 0;
  height: 0;

  @if $direction == up {
    border-left: $size1 solid transparent;
    border-right: $size1 solid transparent;
    border-bottom: $size2 solid $color;
    border-top: none;
  }

  @if $direction == right {
    border-top: $size1 solid transparent;
    border-bottom: $size1 solid transparent;
    border-left: $size2 solid $color;
    border-right: none;
  }

  @if $direction == down {
    border-right: $size1 solid transparent;
    border-left: $size1 solid transparent;
    border-top: $size2 solid $color;
    border-bottom: none;
  }

  @if $direction == left {
    border-top: $size1 solid transparent;
    border-bottom: $size1 solid transparent;
    border-right: $size2 solid $color;
    border-left: none;
  }
}

////////////////////////////////////////////////////////////////////
// Flex
////////////////////////////////////////////////////////////////////

@mixin flex(
  $justify_content: null,
  $align-items: null,
  $flex-direction: null,
  $flex-wrap: null
) {
  display: flex;

  @if $justify-content != null {
    justify-content: $justify-content;
  }

  @if $align-items != null {
    align-items: $align-items;
  }

  @if $flex-direction != null {
    flex-direction: $flex-direction;
  }

  @if $flex-wrap != null {
    flex-wrap: $flex-wrap;
  }
}

////////////////////////////////////////////////////////////////////
// Pseudo Selector Display
////////////////////////////////////////////////////////////////////

@mixin contentdisplay($display: block, $content: "") {
  content: $content;
  display: $display;
}
